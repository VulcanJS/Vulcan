{"version":3,"file":"/packages/jquery-readmore.js","sources":["jquery-readmore/readmore.js/readmore.js"],"names":[],"mappings":";;;;;;;;AAAA,G;AACA,4B;AACA,sB;AACA,gD;AACA,iC;AACA,G;;AAEA,e;;AAEA,4B;AACA,kB;AACA,mB;AACA,uB;AACA,yB;AACA,8C;AACA,0C;AACA,uB;AACA,mD;AACA,yB;AACA,8C;AACA,gD;;AAEA,oB;AACA,mC;AACA,iC;AACA,Q;AACA,0B;;AAEA,yC;AACA,2B;;AAEA,oD;;AAEA,+D;AACA,qE;;AAEA,mC;;AAEA,gD;AACA,8I;;AAEA,sB;AACA,yC;AACA,8B;AACA,4B;AACA,uC;AACA,S;AACA,c;AACA,iD;AACA,S;AACA,2D;AACA,2B;;AAEA,yB;AACA,K;;AAEA,8B;AACA,0B;;AAEA,gB;AACA,G;;AAEA,wB;;AAEA,sB;AACA,uB;;AAEA,uC;AACA,8B;AACA,4L;AACA,yD;;AAEA,iD;AACA,4C;AACA,S;;AAEA,oC;;AAEA,mE;AACA,oF;AACA,sB;AACA,S;AACA,c;AACA,qH;;AAEA,kG;AACA,6I;;AAEA,wC;AACA,6C;AACA,W;AACA,S;AACA,S;;AAEA,8C;AACA,4B;AACA,S;AACA,M;;AAEA,mD;AACA,K;AACA,6B;;AAEA,uB;AACA,kD;AACA,2B;AACA,+D;;AAEA,mD;AACA,6D;AACA,6B;AACA,wB;AACA,mD;AACA,O;;AAEA,Y;AACA,oC;AACA,6B;AACA,oD;AACA,O;;AAEA,mC;AACA,6D;;AAEA,sG;AACA,sC;AACA,gE;;AAEA,qK;;AAEA,uH;AACA,S;AACA,S;AACA,M;;AAEA,qC;AACA,4H;AACA,wC;;AAEA,kB;;AAEA,6C;AACA,M;;AAEA,6B;AACA,uB;;AAEA,iD;AACA,8B;;AAEA,oC;;AAEA,wK;AACA,gE;AACA,S;AACA,S;AACA,M;;AAEA,yB;AACA,uB;;AAEA,uC;AACA,8B;;AAEA,sM;;AAEA,6B;AACA,S;AACA,K;AACA,I;;AAEA,wC;AACA,yB;AACA,+D;AACA,oC;AACA,iD;AACA,4D;AACA,8C;AACA,S;;AAEA,0E;AACA,S;AACA,yF;AACA,oC;AACA,0D;AACA,sF;AACA,qF;AACA,S;AACA,S;AACA,K;AACA,G;AACA,W","sourcesContent":["/*!\n * Readmore.js jQuery plugin\n * Author: @jed_foster\n * Project home: jedfoster.github.io/Readmore.js\n * Licensed under the MIT license\n */\n\n;(function($) {\n\n  var readmore = 'readmore',\n      defaults = {\n        speed: 100,\n        maxHeight: 200,\n        heightMargin: 16,\n        moreLink: '<a href=\"#\">Read More</a>',\n        lessLink: '<a href=\"#\">Close</a>',\n        embedCSS: true,\n        sectionCSS: 'display: block; width: 100%;',\n        startOpen: false,\n        expandedClass: 'readmore-js-expanded',\n        collapsedClass: 'readmore-js-collapsed',\n\n        // callbacks\n        beforeToggle: function(){},\n        afterToggle: function(){}\n      },\n      cssEmbedded = false;\n\n  function Readmore( element, options ) {\n    this.element = element;\n\n    this.options = $.extend( {}, defaults, options);\n\n    $(this.element).data('max-height', this.options.maxHeight);\n    $(this.element).data('height-margin', this.options.heightMargin);\n\n    delete(this.options.maxHeight);\n\n    if(this.options.embedCSS && ! cssEmbedded) {\n      var styles = '.readmore-js-toggle, .readmore-js-section { ' + this.options.sectionCSS + ' } .readmore-js-section { overflow: hidden; }';\n\n      (function(d,u) {\n        var css=d.createElement('style');\n        css.type = 'text/css';\n        if(css.styleSheet) {\n            css.styleSheet.cssText = u;\n        }\n        else {\n            css.appendChild(d.createTextNode(u));\n        }\n        d.getElementsByTagName('head')[0].appendChild(css);\n      }(document, styles));\n\n      cssEmbedded = true;\n    }\n\n    this._defaults = defaults;\n    this._name = readmore;\n\n    this.init();\n  }\n\n  Readmore.prototype = {\n\n    init: function() {\n      var $this = this;\n\n      $(this.element).each(function() {\n        var current = $(this),\n            maxHeight = (current.css('max-height').replace(/[^-\\d\\.]/g, '') > current.data('max-height')) ? current.css('max-height').replace(/[^-\\d\\.]/g, '') : current.data('max-height'),\n            heightMargin = current.data('height-margin');\n\n        if(current.css('max-height') != 'none') {\n          current.css('max-height', 'none');\n        }\n\n        $this.setBoxHeight(current);\n\n        if(current.outerHeight(true) <= maxHeight + heightMargin) {\n          // The block is shorter than the limit, so there's no need to truncate it.\n          return true;\n        }\n        else {\n          current.addClass('readmore-js-section ' + $this.options.collapsedClass).data('collapsedHeight', maxHeight);\n\n          var useLink = $this.options.startOpen ? $this.options.lessLink : $this.options.moreLink;\n          current.after($(useLink).on('click', function(event) { $this.toggleSlider(this, current, event) }).addClass('readmore-js-toggle'));\n\n          if(!$this.options.startOpen) {\n            current.css({height: maxHeight});\n          }\n        }\n      });\n\n      $(window).on('resize', function(event) {\n        $this.resizeBoxes();\n      });\n    },\n\n    toggleSlider: function(trigger, element, event)\n    {\n      event.preventDefault();\n\n      var $this = this,\n          newHeight = newLink = sectionClass = '',\n          expanded = false,\n          collapsedHeight = $(element).data('collapsedHeight');\n\n      if ($(element).height() <= collapsedHeight) {\n        newHeight = $(element).data('expandedHeight') + 'px';\n        newLink = 'lessLink';\n        expanded = true;\n        sectionClass = $this.options.expandedClass;\n      }\n\n      else {\n        newHeight = collapsedHeight;\n        newLink = 'moreLink';\n        sectionClass = $this.options.collapsedClass;\n      }\n\n      // Fire beforeToggle callback\n      $this.options.beforeToggle(trigger, element, expanded);\n\n      $(element).animate({'height': newHeight}, {duration: $this.options.speed, complete: function() {\n          // Fire afterToggle callback\n          $this.options.afterToggle(trigger, element, expanded);\n\n          $(trigger).replaceWith($($this.options[newLink]).on('click', function(event) { $this.toggleSlider(this, element, event) }).addClass('readmore-js-toggle'));\n\n          $(this).removeClass($this.options.collapsedClass + ' ' + $this.options.expandedClass).addClass(sectionClass);\n        }\n      });\n    },\n\n    setBoxHeight: function(element) {\n      var el = element.clone().css({'height': 'auto', 'width': element.width(), 'overflow': 'hidden'}).insertAfter(element),\n          height = el.outerHeight(true);\n\n      el.remove();\n\n      element.data('expandedHeight', height);\n    },\n\n    resizeBoxes: function() {\n      var $this = this;\n\n      $('.readmore-js-section').each(function() {\n        var current = $(this);\n\n        $this.setBoxHeight(current);\n\n        if(current.height() > current.data('expandedHeight') || (current.hasClass($this.options.expandedClass) && current.height() < current.data('expandedHeight')) ) {\n          current.css('height', current.data('expandedHeight'));\n        }\n      });\n    },\n\n    destroy: function() {\n      var $this = this;\n\n      $(this.element).each(function() {\n        var current = $(this);\n\n        current.removeClass('readmore-js-section ' + $this.options.collapsedClass + ' ' + $this.options.expandedClass).css({'max-height': '', 'height': 'auto'}).next('.readmore-js-toggle').remove();\n\n        current.removeData();\n      });\n    }\n  };\n\n  $.fn[readmore] = function( options ) {\n    var args = arguments;\n    if (options === undefined || typeof options === 'object') {\n      return this.each(function () {\n        if ($.data(this, 'plugin_' + readmore)) {\n          var instance = $.data(this, 'plugin_' + readmore);\n          instance['destroy'].apply(instance);\n        }\n\n        $.data(this, 'plugin_' + readmore, new Readmore( this, options ));\n      });\n    } else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {\n      return this.each(function () {\n        var instance = $.data(this, 'plugin_' + readmore);\n        if (instance instanceof Readmore && typeof instance[options] === 'function') {\n          instance[options].apply( instance, Array.prototype.slice.call( args, 1 ) );\n        }\n      });\n    }\n  }\n})(jQuery);\n"]}