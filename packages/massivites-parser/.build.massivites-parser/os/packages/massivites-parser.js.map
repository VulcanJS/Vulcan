{"version":3,"file":"/packages/massivites-parser.js","sources":["massivites-parser/lib/both/routes.coffee","massivites-parser/lib/both/base.coffee","massivites-parser/lib/server/parseFacebookFeed.coffee"],"names":[],"mappings":"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","sourcesContent":["Meteor.startup ->\n\n  Router.onBeforeAction Router._filters.isAdmin,\n    only: ['parserPage']\n\n  AdminParserController = RouteController.extend\n    template: getTemplate 'parserPage'\n    fastRender: true\n\n  Router.route '/parser',\n    name: 'parserPage'\n    controller: AdminParserController","adminNav.push\n  route: 'parserPage'\n  label: 'Parser'","generateUsername = (name) ->\n  name.toLowerCase().replace /\\s+|\\s+/g, \"\"\n\nfindUserByFbId = (fbId) ->\n  Meteor.users.findOne\n    \"fbData.id\": fbId\n\nfindOrInsertUser = (fbUserData) ->\n      isNewUser = false\n      # Check if there's already a user with this name\n      user = findUserByFbId fbUserData.id\n      # if so, use his existing id\n      if user?\n        userId = user._id\n      # create new user and use this id (post author)\n      else\n        isNewUser = true\n        username = generateUsername fbUserData.name\n        userId = Accounts.createUser\n          username: username\n          email: \"#{username}@massivites.io\"\n          password: 'letmein'\n          profile:\n            name: fbUserData.name\n          fbData:\n            id: fbUserData.id\n            name: fbUserData.name\n      userId: userId\n      isNewUser: isNewUser\n\ncheckIfNewPost = (fbPostId) ->\n  post = Posts.findOne 'fbData.id': fbPostId\n  if post? then false else true\n\nMeteor.methods\n  parseFacebookFeed: (jsonFeed) ->\n    parserStats =\n      updatedPosts: 0\n      newPosts: 0\n      newUsers: 0\n      updatedUsers: 0\n      changedComments: 0\n    posts = EJSON.parse(jsonFeed).data\n\n    for post in posts\n\n      # Break the loop and go to the next post if there is no message\n      break if not post.message?\n\n      console.log \"================ Facebook post id: #{post.id} ================\"\n\n      isNewPost = checkIfNewPost post.id\n      postAuthor = post.from\n      postAuthorId = (findOrInsertUser postAuthor).userId\n      postLikes = if post.likes? then post.likes.data.length else 0\n\n      postDoc =\n        author: postAuthor.name\n        body: post.message\n        htmlBody: post.message\n        status: 2\n        upvotes: postLikes\n        baseScore: postLikes\n        downvotes: 0\n        commentCount: 0\n        clickCount: 0\n        viewCount: 0\n        score: 0\n        inactive: false\n        userId: postAuthorId\n        createdAt: post.created_time\n        postedAt: post.created_time\n        fbData:\n          id: post.id\n\n      # insert new post or update an old one\n      Posts.update\n        fbData:\n          id: post.id\n      ,\n        $set: postDoc\n      ,\n        upsert: true\n\n      postDb = Posts.findOne\n        fbData:\n            id: post.id\n\n      if post.comments?\n        comments = post.comments.data\n        parserStats.changedComments += comments.length\n        # update the post's comment count\n        Posts.update postDb._id,\n          $set:\n            commentCount: comments.length\n        ,\n          validate: false\n\n        for comment in comments\n          # @todo insert author\n          commentAuthor = comment.from\n          user = findOrInsertUser commentAuthor\n          commentAuthorId = user.userId\n          if user.isNewUser then parserStats.newUsers +=1 else parserStats.updatedUsers +=1\n          # @todo insert comment\n          commentDoc =\n            upvotes: comment.like_count\n            downvotes: 0\n            score: 0\n            author: commentAuthor.name\n            body: comment.message\n            htmlBody: comment.message\n            createdAt: comment.created_time\n            postedAt: comment.created_time\n            baseScore: comment.like_count\n            upvotes: comment.like_count\n            postId: postDb._id\n            userId: commentAuthorId\n            fbData:\n              id: comment.id\n          # insert new post or update an old one\n          Comments.update\n            fbData:\n              id: comment.id\n          ,\n            $set: commentDoc\n          ,\n            validate: false\n            upsert: true\n\n      # if it's a new post, update the postCount of the author\n      if isNewPost is true\n        parserStats.newPosts += 1\n        Meteor.users.update postAuthorId,\n          $inc:\n            postCount: 1\n\n      parserStats.updatedPosts +=1\n\n    parserStats\n\n      # @todo check whether this actually works\n      # if post.place?\n      #   place = post.place\n      #   postDoc = _.extend postDoc.fbData,\n      #     place:\n      #       id: place.id\n      #       name: place.name\n      #       location:\n      #         city: place.city\n      #         country: place.country\n      #         latitude: place.latitude\n      #         longitude: place.longitude\n      #         street: place.street\n"]}